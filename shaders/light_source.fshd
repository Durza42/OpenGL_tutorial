#version 330 core

/* object.fshd */

out vec4 FragColor;

in vec3 Normal;
in vec2 TexCoord;
in vec3 Frag_pos;

struct Material
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};
uniform Material material;

struct Light
{
    vec3 pos;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
uniform Light light;

struct Object
{
    sampler2D Texture0;
    sampler2D Texture1;
};
uniform Object object;

uniform mat3 model_normals; // model matrix for the normal vercors
uniform vec3 View_pos;

vec3 mypow(vec3 v, float p)
{
    return vec3(
        pow(v.x, p),
        pow(v.y, p),
        pow(v.z, p)
    );
}

void main()
{
    vec3 objColor = mix(texture(object.Texture0, TexCoord),
                        texture(object.Texture1, TexCoord),
                        0.25)
                    .rgb;

//    vec3 objColor = vec3(1.0, 1.0, 1.0);
    vec3 normal = normalize(model_normals * Normal); // because the light source is inside the object

    vec3 ambient_nerf = vec3(0.8);
    // ambient
    vec3 ambient = material.ambient * ambient_nerf;

    // diffuse
    float diffuseStrenght = 1.0 - sqrt( pow(0.75 * (TexCoord.x - 0.5), 2) + pow(0.75 * (TexCoord.y - 0.5), 2) );
    vec3 diffuse = (diffuseStrenght * 0.4) * material.diffuse;

    /* no specular since the object is self-lightened */

    vec3 light_color = mypow(light.ambient * light.diffuse, 0.8);

    vec3 result = mypow(
          mypow((ambient + diffuse) * objColor,            0.0)
        * mypow(light_color * pow(diffuseStrenght, 0.75),  10.0),
                                                           .1
        );

    FragColor = vec4(result, 1.0);
}
