#version 330 core

/* object.fshd */

out vec4 FragColor;

in vec3 Normal;
in vec2 TexCoord;
in vec3 Frag_pos;

struct Material
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};
uniform Material material;

struct Light
{
    vec3 pos;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
uniform Light light;

struct Object
{
    sampler2D Texture0;
    sampler2D Texture1;
};
uniform Object object;

uniform mat3 model_normals; // model matrix for the normal vercors
uniform vec3 View_pos;

void main()
{
    vec3 objColor = mix(texture(object.Texture0, TexCoord),
                        texture(object.Texture1, TexCoord),
                        0.25)
                    .rgb;

//    vec3 objColor = vec3(1.0, 1.0, 1.0);
    vec3 normal = normalize(model_normals *  Normal);

    // ambient
    vec3 ambient = material.ambient * light.ambient;

    // diffuse
    vec3 light_ray = normalize(light.pos - Frag_pos);
    float diffuseStrenght = max(0.0, dot(normal, light_ray));
    vec3 diffuse = diffuseStrenght * material.diffuse * light.diffuse;

    // specular
    vec3 view_dir = normalize(View_pos - Frag_pos);
    vec3 reflected_ray = reflect(-light_ray, normal);
    float specularStrenght = pow( max(dot(view_dir, reflected_ray), 0.0), material.shininess );
    vec3 specular = specularStrenght * material.specular * light.specular;

    vec3 result = (ambient + diffuse + specular) * objColor;

    FragColor = vec4(result, 1.0);
}
